# Chunk 2: setup
library(zinLDA)
library(tidyverse)
library(gridExtra)
library(reshape2)
# Chunk 3: sim1
set.seed(1)
N.d = zinLDA::rdu(n = 40, min = 100, max = 200)
sim1 = zinLDA::simulateZINLDA(D = 40, V = 50, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.4, a = .5, b = 10)
# Chunk 4: show-cohort
head(sim1$cohort[[1]])
# Chunk 5: show-z
head(sim1$z[[1]])
# Chunk 6: show-sampleTaxaMatrix
sim1$sampleTaxaMatrix[1:5,1:5]
# Chunk 7: show tbd
sim1$theta[1:5,]
sim1$beta[,1:5]
sim1$delta[,1:5]
# Chunk 8: sparsity-1
sparsity = function(sim){
length(which(sim$sampleTaxaMatrix==0))/prod(dim(sim$sampleTaxaMatrix))
}
sparsity(sim1)
# Chunk 9: heatmap-1
abunHeatmap = function(sim){
reshape2::melt(asinh(sim$sampleTaxaMatrix)) %>%
dplyr::rename(sample = Var1, taxa = Var2, asinh.abun = value) %>%
ggplot2::ggplot(., aes (x = taxa, y = sample, fill = asinh.abun)) +
ggplot2::geom_tile() + ggplot2::theme_bw() + ggplot2::labs(fill = "arcsin\nabundance") +
ggplot2::theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x = element_text(size=4, angle=90), axis.text.y = element_text(size=4)) +
ggplot2::scale_fill_gradient(low="white", high="#2171b5", na.value = "grey")
}
abunHeatmap(sim1)
# Chunk 12
modelFit1 = zinLDA::zinLDA(sim1$sampleTaxaMatrix, K = 4, a = .5, b = 10)
posteriorEsts = zinLDA::posterior(modelFit1)
# Chunk 13: top-taxa
reshape2::melt(posteriorEsts$beta) %>%
dplyr::rename(community=Var1, taxa=Var2, beta=value) %>%
dplyr::group_by(community) %>% dplyr::top_n(5, beta) %>%
dplyr::ungroup() %>% dplyr::arrange(community, -beta) %>%
dplyr::mutate(taxa = tidytext::reorder_within(taxa, beta, community)) %>%
ggplot2::ggplot(aes(taxa, beta, fill = factor(community))) +
ggplot2::geom_col(show.legend = FALSE) +
ggplot2::facet_wrap(~ community, scales = "free", nrow = 5) +
ggplot2::coord_flip() + tidytext::scale_x_reordered() +
ggplot2::labs(title = "Top Taxa per Subcommunity") + ggplot2::ylab(expression(beta)) + ggplot2::xlab("") +
ylim(0, 1) + ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size = 4), axis.text.y = element_text(size = 4)) +
ggplot2::geom_text(aes(label = round(beta, 3)), hjust = -.1, size = 1.5)
dim(sim1$beta)
dim(posteriorEsts$beta)
missedTaxa = which(colSums(sim1$sampleTaxaMatrix)==0)
cor(t(sim1$beta[,-missedTaxa]), t(posteriorEsts$beta))
rownames(posteriorEsts$beta)=rownames(posteriorEsts$delta)=c("Community 4","Community 2","Community 1","Community 3")
diagn.data = dplyr::inner_join(sim1$delta[,-missedTaxa] %>% reshape2::melt(.) %>%
dplyr::rename(community=Var1,taxa=Var2,delta=value) %>%
dplyr::mutate(community = as.factor(community)),
posteriorEsts$delta %>% reshape2::melt(.) %>%
dplyr::rename(community=Var1,taxa=Var2,delta=value) %>%
dplyr::mutate(community = as.factor(community)) )
diagn.data
diagnosticsFunc = function(community, data, truth, pos=1, neg=0, prev){
x = data[which(rownames(data) == community),]
ref = truth[community,]
sens = caret::sensitivity(as.factor(x), as.factor(ref), pos)
spec = caret::specificity(as.factor(x), as.factor(ref), neg)
ppv = caret::posPredValue(as.factor(x), as.factor(ref), pos, prev)
npv = caret::negPredValue(as.factor(x), as.factor(ref), neg, prev)
out = c(sens, spec, ppv, npv)
names(out) = c("sensitivity", "specificity", "PPV", "NPV")
return(out)
}
?sensitivity
??sensitivity
diagnosticsFunc = function(estimated, truth, pos=1, neg=0, prev){
sens = caret::sensitivity(as.factor(estimated), as.factor(truth), pos)
spec = caret::specificity(as.factor(estimated), as.factor(truth), neg)
ppv = caret::posPredValue(as.factor(estimated), as.factor(truth), pos, prev)
npv = caret::negPredValue(as.factor(estimated), as.factor(truth), neg, prev)
out = c(sens, spec, ppv, npv)
names(out) = c("sensitivity", "specificity", "PPV", "NPV")
return(out)
}
sim1$delta[,-missedTaxa] %>% reshape2::melt(.) %>% dplyr::pull(value)
diagn.data
diagn.data = dplyr::inner_join(sim1$delta[,-missedTaxa] %>% reshape2::melt(.) %>%
dplyr::rename(community=Var1,taxa=Var2,trueDelta=value) %>%
dplyr::mutate(community = as.factor(community)),
posteriorEsts$delta %>% reshape2::melt(.) %>%
dplyr::rename(community=Var1,taxa=Var2,estDelta=value) %>%
dplyr::mutate(community = as.factor(community)) )
diagn.data
diagnosticsFunc(diagn.data$estDelta, diagn.data$trueDelta)
diagnosticsFunc(diagn.data$estDelta, diagn.data$trueDelta,prev=0.4)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
comment = NA
)
# Chunk 2: setup
library(zinLDA)
library(tidyverse)
library(gridExtra)
library(reshape2)
library(tidytext)
# Chunk 3: sim1
set.seed(1)
N.d = zinLDA::rdu(n = 40, min = 100, max = 200)
sim1 = zinLDA::simulateZINLDA(D = 40, V = 50, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.4, a = .5, b = 10)
# Chunk 4: show-cohort
head(sim1$cohort[[1]])
# Chunk 5: show-z
head(sim1$z[[1]])
# Chunk 6: show-sampleTaxaMatrix
sim1$sampleTaxaMatrix[1:5,1:5]
# Chunk 7: show tbd
sim1$theta[1:5,]
sim1$beta[,1:5]
sim1$delta[,1:5]
# Chunk 8: sparsity-1
sparsity = function(sim){
length(which(sim$sampleTaxaMatrix==0))/prod(dim(sim$sampleTaxaMatrix))
}
sparsity(sim1)
# Chunk 9: heatmap-1
abunHeatmap = function(sim){
reshape2::melt(asinh(sim$sampleTaxaMatrix)) %>%
dplyr::rename(sample = Var1, taxa = Var2, asinh.abun = value) %>%
ggplot2::ggplot(., aes (x = taxa, y = sample, fill = asinh.abun)) +
ggplot2::geom_tile() + ggplot2::theme_bw() + ggplot2::labs(fill = "arcsin\nabundance") +
ggplot2::theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x = element_text(size=4, angle=90), axis.text.y = element_text(size=4)) +
ggplot2::scale_fill_gradient(low="white", high="#2171b5", na.value = "grey")
}
abunHeatmap(sim1)
sim2 = zinLDA::simulateZINLDA(D = 40, V = 50, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.4, a = 1, b = 25)
sim3 = zinLDA::simulateZINLDA(D = 40, V = 25, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.4, a = .5, b = 10)
sim4 = zinLDA::simulateZINLDA(D = 40, V = 50, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.7, a = .5, b = 10)
sim5 = zinLDA::simulateZINLDA(D = 40, V = 50, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.4, a = .5, b = 5)
sim.ls = list(sim2,sim3,sim4,sim5)
lapply(sim.ls, sparsity)
sim.ls = list(sim2,sim3,sim4)
lapply(sim.ls, sparsity)
asinh.abun.hmp = purrr::map2(sim.ls, 1:4, function(x, y) abunHeatmap(x) + theme(legend.position="none") + ggplot2::ggtitle(y))
count.hmp.ls = do.call("grid.arrange", c(asinh.abun.hmp, ncol=3))
lapply(sim.ls, sparsity)
asinh.abun.hmp = purrr::map2(sim.ls, 1:4, function(x, y) abunHeatmap(x) + theme(legend.position="none") + ggplot2::ggtitle(y))
asinh.abun.hmp = purrr::map2(sim.ls, 1:3, function(x, y) abunHeatmap(x) + theme(legend.position="none") + ggplot2::ggtitle(y))
count.hmp.ls = do.call("grid.arrange", c(asinh.abun.hmp, ncol=3))
apply(sim2$beta,1,summary)
apply(sim1$beta,1,summary)
apply(sim3$beta,1,summary)
apply(sim4$beta,1,summary)
cols(sim1$sampleTaxaMatrix)
colSums(sim1$sampleTaxaMatrix)
which(colSums(sim1$sampleTaxaMatrix)==0)
lapply(list(sim1,sim.ls), function(x) which(colSums(x$sampleTaxaMatrix)==0))
lapply(sim.ls, function(x) which(colSums(x$sampleTaxaMatrix)==0))
list(sim1,sim.ls)
sim.ls
lapply(list(sim1,sim2,sim3,sim4), function(x) which(colSums(x$sampleTaxaMatrix)==0))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
# set up pipe
usethis::use_pipe(export = TRUE)
devtools::check()
?usethis::use_pipe
?usethis::use_pipe
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(zinLDA)
devtools::check()
devtools::check()
?%>%
??%>%
??pipe
devtools::check()
?devtools::document
devtools::document()
devtools::document()
library(zinLDA)
devtools::check()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE
)
# Chunk 3: sim1
set.seed(1)
N.d = zinLDA::rdu(n = 40, min = 100, max = 200)
sim1 = zinLDA::simulateZINLDA(D = 40, V = 50, N = N.d, K = 4,
Alpha = 0.1, Pi = 0.4, a = .5, b = 10)
# Chunk 4: show-cohort
head(sim1$cohort[[1]])
# Chunk 5: show-z
head(sim1$z[[1]])
# Chunk 6: show-sampleTaxaMatrix
sim1$sampleTaxaMatrix[1:5,1:5]
# Chunk 7: show tbd
sim1$theta[1:5,]
sim1$beta[,1:5]
sim1$delta[,1:5]
# Chunk 8: sparsity-1
sparsity = function(sim){
length(which(sim$sampleTaxaMatrix==0))/prod(dim(sim$sampleTaxaMatrix))
}
sparsity(sim1)
abunHeatmap = function(sim){
reshape2::melt(asinh(sim$sampleTaxaMatrix)) %>%
dplyr::rename(sample = Var1, taxa = Var2, asinh.abun = value) %>%
ggplot2::ggplot(., aes (x = taxa, y = sample, fill = asinh.abun)) +
ggplot2::geom_tile() + ggplot2::theme_bw() + ggplot2::labs(fill = "arcsin\nabundance") +
ggplot2::theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x = element_text(size=3, angle=90), axis.text.y = element_text(size=4)) +
ggplot2::scale_fill_gradient(low="white", high="#2171b5", na.value = "grey")
}
abunHeatmap(sim1)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_testthat()
usethis::use_test("simulateZINLDA errors")
usethis::use_test("test-simulateZINLDA")
usethis::use_test("simulateZINLDA")
?context
devtools::test()
set.seed(1)
d = 30
N.d = rdu(D, 100, 200)
#' @param max upper limit of the distribution.
#'
#' @return A \code{n-}length numeric vector of observations from a DU(\code{min}, \code{max}) distribution.
#'
#' @author Rebecca A. Deek
#'
#' @export
#'
#' @examples
#' N = rdu(n = 50, min = 10000, max = 15000)
rdu <- function(n, min, max) {
# error messages
if(class(n)!="numeric" | length(n)!=1){
stop("ERROR: n must be a length 1 numeric integer.")
}else if(class(min)!="numeric" | length(min)!=1){
stop("ERROR: min must be a length 1 numeric integer.")
}else if(class(max)!="numeric" | length(max)!=1 | max<min){
stop("ERROR: max must be a length 1 numeric integer such that max > min.")
}
sample(min:max, n, replace = TRUE)
}
simulateZINLDA(D=d, V=50, N=N.d, K=3, Alpha=alpha, a=.5, b=10)
d = 30
N.d = rdu(D, 100, 200)
N.d = rdu(D, 100, 200)
D
set.seed(1)
d = 30
N.d = rdu(d, 100, 200)
alpha = rep(.1, 3)
expect_error(simulateZINLDA(D=d, V=50, N=N.d, K=3, Alpha=alpha, a=.5, b=10),
regexp = 'ERROR: This package assumes hyperparameters are symmetric. Each must be a length 1 numeric integer.')
expect_error(simulateZINLDA(D=d, V=50, N=N.d, K=3, Alpha=alpha, Pi=0.4, a=.5, b=10),
regexp = 'ERROR: This package assumes hyperparameters are symmetric. Each must be a length 1 numeric integer.')
set.seed(1)
d = 30
N.d = rdu(d, 100, 200)
alpha = rep(.1, 3)
expect_error(simulateZINLDA(D=d, V=50, N=N.d, K=3, Alpha=alpha, Pi=0.4, a=.5, b=10),
regexp = 'ERROR: This package assumes hyperparameters are symmetric. Each must be a length 1 numeric integer.')
rm(list=ls())
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::load_all()
set.seed(1)
d = 30; v=50; k = 3
N.d = rdu(d, 100, 200)
sim = simulateZINLDA(D=d, V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10)
d = 30; v=50; k = -3
N.d = rdu(d, 100, 200)
sim = simulateZINLDA(D=d, V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10)
usethis::use_test("zinLDA")
rm(list=ls())
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
usethis::use_test("posterior")
usethis::use_test("posterior")
devtools::test()
set.seed(1)
d = 20; v=50; k = 3; iter=500
N.d = rdu(d, 100, 200)
sim = simulateZINLDA(D=d, V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10)
which(colSums(sim$sampleTaxaMatrix)==0)
length(which(colSums(sim$sampleTaxaMatrix)==0))
rm(list=ls())
devtools::test()
?usethis::use_travis
install.packages("spelling")
?spelling::spell_check_package
spelling::spell_check_package()
spelling::update_wordlist()
spelling::spell_check_package()
devtools::document()
library(zinLDA)
spelling::spell_check_package()
install.packages("pkgdown")
pkgdown::build_site()
devtools::document()
library(zinLDA)
library(zinLDA)
usethis::use_pkgdown()
pkgdown::build_site()
library(zinLDA)
library(zinLDA)
pkgdown::build_site()
devtools::document()
devtools::document()
library(zinLDA)
library(zinLDA)
spelling::spell_check_package()
pkgdown::build_site()
devtools::document()
library(zinLDA)
library(zinLDA)
pkgdown::build_site()
?expect_warning
??expect_warning
#' \item{theta}{matrix of subcommunity probabilities per sample.}
#' \item{beta}{matrix of taxa probabilities per subcommunity.}
#' \item{delta}{matrix of structural zero indicators for each taxa and subcommunity.}
#'
#' @export
#'
#' @examples
#' N.d = rdu(n = 50, min = 10000, max = 15000)
#' simData = simulateZINLDA(D = 50, V = 100, N = N.d, K = 5, Alpha = .1,
#'                          Pi = 0.4, a = .05, b = 10)
simulateZINLDA <- function(D, V, N, K, Alpha, Pi, a, b) {
# error messages
if(class(Alpha)!="numeric" | length(Alpha)!=1 |
class(Pi)   !="numeric" | length(Pi)!=1 |
class(a)    !="numeric" | length(a)!=1 |
class(b)    !="numeric" | length(b)!=1){
stop("ERROR: This package assumes hyperparameters are symmetric. Each must be a length 1 double.")
} else if(Alpha <= 0){
} else if(class(D)!="numeric" | length(D)!=1 | !(D %% 1 ==0)){
stop("ERROR: D must be a length 1 integer.")
} else if(class(V)!="numeric" | length(V)!=1 | !(V %% 1 ==0)){
stop("ERROR: V must be a length 1 integer.")
} else if(class(K)!="numeric" | length(K)!=1 | !(K %% 1 ==0)){
stop("ERROR: K must be a length 1 integer.")
} else if(class(N)!="integer" | length(N)!=D){
stop("ERROR: N must be a length D numeric vector.")
}
# data labels
taxa <- paste0("Taxa ",seq(V))
communities <- paste0("Community ", seq(K))
samples <- paste0("Sample ", seq(D))
# simulate delta
Delta = do.call(cbind, lapply(1:V, function(i){stats::rbinom(n = K, size = 1, prob = Pi)}))
rownames(Delta) <- communities
colnames(Delta) <- taxa
# resample delta for i with delta_ij == 1 for every j until atleast 1 delta_ij = 0
deltaCheck = T
while(deltaCheck){
V.rs = which(colSums(Delta) == K)
n.V.rs = length(V.rs)
Delta[,V.rs] = do.call(cbind, lapply(1:n.V.rs, function(i){stats::rbinom(n = K, size = 1, prob = Pi)}))
deltaCheck = length(which(colSums(Delta) == K))
}
# sample beta ~ ZIGD(pi, a, b)
Beta <- ifelse(Delta == 1, 0, NA)
for (j in 1:K) {
Q_j_index <- which(Delta[j,] == 0)
Q_j <- stats::rbeta(length(Q_j_index)-1, a, b)
for (l in seq_along(Q_j_index[1:length(Q_j_index)-1])) { # sequence along first K non-zero Q
Beta[j, Q_j_index[l]] <- Q_j[l]*prod(1 - Q_j[0:(l-1)])  # beta_{ij} = Q_{ij} prod_{l=1}^{i-1} (1-Q_{lj})
}
# K+1 beta
Beta[j, Q_j_index[length(Q_j_index)]] <- 1 - sum(Beta[j,], na.rm = T)
}
# sample theta ~ Dirichlet(alpha)
Theta <- MCMCpack::rdirichlet(n = D, alpha = rep(Alpha, K))
rownames(Theta) <- samples
colnames(Theta) <- communities
# function to generate samples
generateSample <- function(N, theta, beta){
sample <- vector(length = N)
z_d <- vector(length = N)
for (n in 1:N) {
# For each N in the sample
z_n <- stats::rmultinom(1, 1, theta)                  # First choose a community z_n ~ multinomial(theta)
w_n <- stats::rmultinom(1, 1, beta[which(z_n == 1),]) # Second choose a word ~ Pr(w_n | z_n, beta)
sample[n] <- colnames(beta)[which(w_n == 1)]
z_d[n] <- which(z_n == 1)
names(z_d)[n] <- sample[n]
}
return(list("sample" = sample,
"z" = z_d))
}
# generate cohort
cohort <- vector(mode = "list", length = D)
z <- vector(mode = "list", length = D)
for (d in 1:D) {
sample.d <- generateSample(N[d], Theta[d,], Beta)
cohort[[d]] <- sample.d[["sample"]]
z[[d]] <- sample.d[["z"]]
}
# convert sample into a frequency count of each unique word
sampleTaxaFreq <- lapply(cohort, table)
# sample-taxa frequency matrix
sampleTaxaMatrix <- matrix(data = 0, nrow = D, ncol = V)
rownames(sampleTaxaMatrix) <- samples
colnames(sampleTaxaMatrix) <- taxa
# assign non-zero count to taxa in sample
for (d in 1:D) {
sampleTaxaMatrix[d, names(sampleTaxaFreq[[d]])] <- sampleTaxaFreq[[d]]
}
return(list("cohort" = cohort,
"z" = z,
"sampleTaxaMatrix" = sampleTaxaMatrix,
"theta" = Theta,
"beta" = Beta,
"delta" = Delta))
}
set.seed(1)
v=50; k=3
N.d = rdu(30, 100, 200)
devtools::load_all()
rm(list=ls())
devtools::load_all()
set.seed(1)
v=50; k=3
N.d = rdu(30, 100, 200)
simulateZINLDA(D=rep(30,2), V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10)
simulateZINLDA(D="30", V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10)
simulateZINLDA(D=30.5, V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10)
test_that("D is a scalar integer", {
set.seed(1)
v=50; k=3
N.d = rdu(30, 100, 200)
expect_error(simulateZINLDA(D=rep(30,2), V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10))
expect_error(simulateZINLDA(D="30", V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10))
expect_error(simulateZINLDA(D=30.5, V=v, N=N.d, K=k, Alpha=0.1, Pi=0.4, a=.5, b=10),
regexp = "ERROR: D must be a length 1 integer.")
})
rrm(list=ls())
rm(list=ls())
library(zinLDA)
library(zinLDA)
pkgdown::build_site()
devtools::document()
devtools::document()
library(zinLDA)
library(zinLDA)
pkgdown::build_site()
?use_git_ignore
??use_git_ignore
?usethis::use_travis
usethis::use_travis()
usethis::use_coverage(type="codecov")
install.packages("covr")
install.packages("covr")
library(covr)
codecov(tocken = "88d7a83d-9b8d-4283-80a7-ef7c0d07d44b")
report()
?create_package
pkgdown::build_site()
