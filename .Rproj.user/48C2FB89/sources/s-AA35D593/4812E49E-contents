---
title: "Build zinLDA package"
author: "Rebecca Deek"
date: "10/21/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(devtools)
library(roxygen2)
library(usethis)
```

https://debruine.github.io/tutorials/packages.html#create-your-r-package

https://kbroman.org/AdvData/18_rpack_demo.html

https://www.rostrum.blog/2019/11/01/usethis/

https://gallery.rcpp.org/articles/documenting-rcpp-packages/

https://r-pkgs.org/src.html#cpp

https://r-pkgs.org/vignettes.html

http://www.danieldsjoberg.com/writing-R-packages/#1


# Create package skeleton

```{r}
usethis::create_package("~/Documents/zinLDA")
```

# Edit the description file

```{r}
usethis::use_description()
```

# Autot set up DESCRIPTION file with

```{r, eval = F}
usethis::edit_r_profile() # opens .Rprofile window
```

Copy this into the new open window and edit appropriately:

options(
  usethis.description = list(
    `Authors@R` = 'person("Jane", "Doe", email = "jane@example.com", role = c("aut", "cre"),
                          comment = c(ORCID = "YOUR-ORCID-ID"))',
    License = "MIT + file LICENSE",
    Language =  "es"
  )
)

# Add license, optional if edited description as above

```{r}
usethis::use_mit_license("Rebecca A Deek")
```

# Add a README

```{r}
usethis::use_readme_rmd()
```



# Add functions

```{r}
usethis::use_r("simulateZINLDA")
usethis::use_r("rdu")
usethis::use_r("zinLDA")
usethis::use_r("posterior")
```

# Add Rcpp Functions

```{r}
usethis::use_rcpp()
usethis::use_rcpp_armadillo()
```

Add this somewhere to a `.R` file names `mypackage.R` to compile C code

```
#' @useDynLib your-package-name
#' @importFrom Rcpp sourceCpp
NULL
#> NULL
```

# Documentation

Enable Roxygen to automatically make documentation with the following command (you only need to run this once per package).

```{r}
usethis::use_roxygen_md()
```

use `devtools::document()` to render documentation files

# Add dependencies

```{r}
usethis::use_package("stats")
usethis::use_package("MCMCpack")
usethis::use_package("pbapply")
usethis::use_package("topicmodels")
usethis::use_package("tibble")
usethis::use_package("Rcpp")
usethis::use_package("RcppArmadillo")
usethis::use_package("utils")

# set up pipe
usethis::use_pipe(export = TRUE)

```

Check your package with `devtools::check()`

# Vignette

```{r}
usethis::use_vignette("zinLDA-vignette")
```


# Test out package

load functions with `devtools::load_all`

```{r, eval = F}
set.seed(1)
N.d = rdu(n = 50, min = 100, max = 500)
simData = simulateZINLDA(D = 50, V = 50, N = N.d, K = 5, Alpha = .1, Pi = 0.4, a = 1, b = 10)
########################################################################################################################
# delta0=simData$delta[,-which(colSums(simData$sampleTaxaMatrix) == 0)]
# beta0=simData$beta[,-which(colSums(simData$sampleTaxaMatrix) == 0)]
# sampleTaxaMatrix0=simData$sampleTaxaMatrix[,-which(colSums(simData$sampleTaxaMatrix) == 0)]
########################################################################################################################
zinLDA.fit = zinLDA(simData$sampleTaxaMatrix, K = 5, a = 1)
posteriorEst = posterior(zinLDA.fit)

cor(t(simData$beta),t(posteriorEst$beta))
# re-label ZILDA communities to match the true labels based on correlation
rownames(posteriorEst$beta) = rownames(posteriorEst$delta) = 
  c("Community 4", "Community 5", "Community 3", "Community 2", "Community 1")

diagnosticsFunc = function(community, data, truth, pos=1, neg=0, prev){
  x = data[which(rownames(data) == community),]
  ref = truth[community,]
  
  sens = caret::sensitivity(as.factor(x), as.factor(ref), pos)
  spec = caret::specificity(as.factor(x), as.factor(ref), neg)
  ppv = caret::posPredValue(as.factor(x), as.factor(ref), pos, prev)
  npv = caret::negPredValue(as.factor(x), as.factor(ref), neg, prev)
  
  out = c(sens, spec, ppv, npv)
  names(out) = c("sensitivity", "specificity", "PPV", "NPV")
  return(out)
}

diagn.zinLDA = t(sapply(rownames(simData$delta), diagnosticsFunc, 
                        data = posteriorEst$delta, truth = simData$delta, prev = 0.4))
avg.zinLDA = apply(diagn.zinLDA, 2, mean)
```

# testthat

To set up your package to use testthat, run:

```{r setup-testthat}
usethis::use_testthat()
```

```{r create-tests}
usethis::use_test("simulateZINLDA")
usethis::use_test("zinLDA")
usethis::use_test("posterior")
```

# Continuous Integration

https://bookdown.org/rdpeng/RProgDA/continuous-integration.html


# spelling

```{r}
spelling::spell_check_package()
```

# pkgdown

`usethis::use_pkgdown` build-ignores the docs directory and _pkgdown.yml file so `devtools::check` doesn't give a note

`pkgdown::build_site` creates the website for your package

```{r}
usethis::use_pkgdown()
pkgdown::build_site()
```

























```{r, eval=F,include=F}
missedTaxa = which(colSums(sim1$sampleTaxaMatrix)==0)

cor(t(sim1$beta[,-missedTaxa]), t(posteriorEsts$beta))

rownames(posteriorEsts$beta)=rownames(posteriorEsts$delta)=c("Community 4","Community 2","Community 1","Community 3")

diagn.data = dplyr::inner_join(sim1$delta[,-missedTaxa] %>% reshape2::melt(.) %>%
                                 dplyr::rename(community=Var1,taxa=Var2,trueDelta=value) %>%
                                 dplyr::mutate(community = as.factor(community)),
                               posteriorEsts$delta %>% reshape2::melt(.) %>%
                                 dplyr::rename(community=Var1,taxa=Var2,estDelta=value) %>%
                                 dplyr::mutate(community = as.factor(community)) )

diagnosticsFunc = function(estimated, truth, pos=1, neg=0, prev){
  sens = caret::sensitivity(as.factor(estimated), as.factor(truth), pos)
  spec = caret::specificity(as.factor(estimated), as.factor(truth), neg)
  ppv = caret::posPredValue(as.factor(estimated), as.factor(truth), pos, prev)
  npv = caret::negPredValue(as.factor(estimated), as.factor(truth), neg, prev)
  
  out = c(sens, spec, ppv, npv)
  names(out) = c("sensitivity", "specificity", "PPV", "NPV")
  return(out)
}
diagnosticsFunc(diagn.data$estDelta, diagn.data$trueDelta,prev=0.4)
```
